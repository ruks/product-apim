/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.CertificateInfoDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ClientCertMetadataDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientCertificatesIndividualApi {
    private ApiClient apiClient;

    public ClientCertificatesIndividualApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientCertificatesIndividualApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clientCertificatesAliasContentGet
     * @param alias  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasContentGetCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client-certificates/{alias}/content"
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientCertificatesAliasContentGetValidateBeforeCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling clientCertificatesAliasContentGet(Async)");
        }
        

        com.squareup.okhttp.Call call = clientCertificatesAliasContentGetCall(alias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download a certificate.
     * This operation can be used to download a certificate which matches the given alias. 
     * @param alias  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientCertificatesAliasContentGet(String alias) throws ApiException {
        clientCertificatesAliasContentGetWithHttpInfo(alias);
    }

    /**
     * Download a certificate.
     * This operation can be used to download a certificate which matches the given alias. 
     * @param alias  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientCertificatesAliasContentGetWithHttpInfo(String alias) throws ApiException {
        com.squareup.okhttp.Call call = clientCertificatesAliasContentGetValidateBeforeCall(alias, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download a certificate. (asynchronously)
     * This operation can be used to download a certificate which matches the given alias. 
     * @param alias  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasContentGetAsync(String alias, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientCertificatesAliasContentGetValidateBeforeCall(alias, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientCertificatesAliasDelete
     * @param alias The alias of the certificate that should be deleted.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasDeleteCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client-certificates/{alias}"
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientCertificatesAliasDeleteValidateBeforeCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling clientCertificatesAliasDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = clientCertificatesAliasDeleteCall(alias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a certificate.
     * This operation can be used to delete an uploaded certificate. 
     * @param alias The alias of the certificate that should be deleted.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientCertificatesAliasDelete(String alias) throws ApiException {
        clientCertificatesAliasDeleteWithHttpInfo(alias);
    }

    /**
     * Delete a certificate.
     * This operation can be used to delete an uploaded certificate. 
     * @param alias The alias of the certificate that should be deleted.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientCertificatesAliasDeleteWithHttpInfo(String alias) throws ApiException {
        com.squareup.okhttp.Call call = clientCertificatesAliasDeleteValidateBeforeCall(alias, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a certificate. (asynchronously)
     * This operation can be used to delete an uploaded certificate. 
     * @param alias The alias of the certificate that should be deleted.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasDeleteAsync(String alias, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientCertificatesAliasDeleteValidateBeforeCall(alias, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientCertificatesAliasGet
     * @param alias  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasGetCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client-certificates/{alias}"
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientCertificatesAliasGetValidateBeforeCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling clientCertificatesAliasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = clientCertificatesAliasGetCall(alias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the certificate information.
     * This operation can be used to get the information about a certificate. 
     * @param alias  (required)
     * @return CertificateInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateInfoDTO clientCertificatesAliasGet(String alias) throws ApiException {
        ApiResponse<CertificateInfoDTO> resp = clientCertificatesAliasGetWithHttpInfo(alias);
        return resp.getData();
    }

    /**
     * Get the certificate information.
     * This operation can be used to get the information about a certificate. 
     * @param alias  (required)
     * @return ApiResponse&lt;CertificateInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateInfoDTO> clientCertificatesAliasGetWithHttpInfo(String alias) throws ApiException {
        com.squareup.okhttp.Call call = clientCertificatesAliasGetValidateBeforeCall(alias, null, null);
        Type localVarReturnType = new TypeToken<CertificateInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the certificate information. (asynchronously)
     * This operation can be used to get the information about a certificate. 
     * @param alias  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasGetAsync(String alias, final ApiCallback<CertificateInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientCertificatesAliasGetValidateBeforeCall(alias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientCertificatesAliasPut
     * @param alias Alias for the certificate (required)
     * @param certificate The certificate that needs to be uploaded. (optional)
     * @param tier The tier of the certificate (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasPutCall(String alias, File certificate, String tier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client-certificates/{alias}"
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certificate != null)
        localVarFormParams.put("certificate", certificate);
        if (tier != null)
        localVarFormParams.put("tier", tier);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientCertificatesAliasPutValidateBeforeCall(String alias, File certificate, String tier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling clientCertificatesAliasPut(Async)");
        }
        

        com.squareup.okhttp.Call call = clientCertificatesAliasPutCall(alias, certificate, tier, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a certificate.
     * This operation can be used to update an uploaded certificate. 
     * @param alias Alias for the certificate (required)
     * @param certificate The certificate that needs to be uploaded. (optional)
     * @param tier The tier of the certificate (optional)
     * @return ClientCertMetadataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientCertMetadataDTO clientCertificatesAliasPut(String alias, File certificate, String tier) throws ApiException {
        ApiResponse<ClientCertMetadataDTO> resp = clientCertificatesAliasPutWithHttpInfo(alias, certificate, tier);
        return resp.getData();
    }

    /**
     * Update a certificate.
     * This operation can be used to update an uploaded certificate. 
     * @param alias Alias for the certificate (required)
     * @param certificate The certificate that needs to be uploaded. (optional)
     * @param tier The tier of the certificate (optional)
     * @return ApiResponse&lt;ClientCertMetadataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientCertMetadataDTO> clientCertificatesAliasPutWithHttpInfo(String alias, File certificate, String tier) throws ApiException {
        com.squareup.okhttp.Call call = clientCertificatesAliasPutValidateBeforeCall(alias, certificate, tier, null, null);
        Type localVarReturnType = new TypeToken<ClientCertMetadataDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a certificate. (asynchronously)
     * This operation can be used to update an uploaded certificate. 
     * @param alias Alias for the certificate (required)
     * @param certificate The certificate that needs to be uploaded. (optional)
     * @param tier The tier of the certificate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesAliasPutAsync(String alias, File certificate, String tier, final ApiCallback<ClientCertMetadataDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientCertificatesAliasPutValidateBeforeCall(alias, certificate, tier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientCertMetadataDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientCertificatesPost
     * @param certificate The certificate that needs to be uploaded. (required)
     * @param alias Alias for the certificate (required)
     * @param apiId apiId to which the certificate should be applied. (required)
     * @param tier apiId to which the certificate should be applied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesPostCall(File certificate, String alias, String apiId, String tier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client-certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certificate != null)
        localVarFormParams.put("certificate", certificate);
        if (alias != null)
        localVarFormParams.put("alias", alias);
        if (apiId != null)
        localVarFormParams.put("apiId", apiId);
        if (tier != null)
        localVarFormParams.put("tier", tier);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientCertificatesPostValidateBeforeCall(File certificate, String alias, String apiId, String tier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificate' is set
        if (certificate == null) {
            throw new ApiException("Missing the required parameter 'certificate' when calling clientCertificatesPost(Async)");
        }
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling clientCertificatesPost(Async)");
        }
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling clientCertificatesPost(Async)");
        }
        
        // verify the required parameter 'tier' is set
        if (tier == null) {
            throw new ApiException("Missing the required parameter 'tier' when calling clientCertificatesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = clientCertificatesPostCall(certificate, alias, apiId, tier, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a new certificate.
     * This operation can be used to upload a new certificate for an endpoint. 
     * @param certificate The certificate that needs to be uploaded. (required)
     * @param alias Alias for the certificate (required)
     * @param apiId apiId to which the certificate should be applied. (required)
     * @param tier apiId to which the certificate should be applied. (required)
     * @return ClientCertMetadataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientCertMetadataDTO clientCertificatesPost(File certificate, String alias, String apiId, String tier) throws ApiException {
        ApiResponse<ClientCertMetadataDTO> resp = clientCertificatesPostWithHttpInfo(certificate, alias, apiId, tier);
        return resp.getData();
    }

    /**
     * Upload a new certificate.
     * This operation can be used to upload a new certificate for an endpoint. 
     * @param certificate The certificate that needs to be uploaded. (required)
     * @param alias Alias for the certificate (required)
     * @param apiId apiId to which the certificate should be applied. (required)
     * @param tier apiId to which the certificate should be applied. (required)
     * @return ApiResponse&lt;ClientCertMetadataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientCertMetadataDTO> clientCertificatesPostWithHttpInfo(File certificate, String alias, String apiId, String tier) throws ApiException {
        com.squareup.okhttp.Call call = clientCertificatesPostValidateBeforeCall(certificate, alias, apiId, tier, null, null);
        Type localVarReturnType = new TypeToken<ClientCertMetadataDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a new certificate. (asynchronously)
     * This operation can be used to upload a new certificate for an endpoint. 
     * @param certificate The certificate that needs to be uploaded. (required)
     * @param alias Alias for the certificate (required)
     * @param apiId apiId to which the certificate should be applied. (required)
     * @param tier apiId to which the certificate should be applied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientCertificatesPostAsync(File certificate, String alias, String apiId, String tier, final ApiCallback<ClientCertMetadataDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientCertificatesPostValidateBeforeCall(certificate, alias, apiId, tier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientCertMetadataDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
